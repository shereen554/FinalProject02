// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(RequestMedicinesContext))]
    [Migration("20240222075426_addcolum")]
    partial class addcolum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_ID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.HasKey("CustomerId", "OrderId")
                        .HasName("PK__Customer__23ACC080D66EBADD");

                    b.HasIndex("OrderId");

                    b.ToTable("Customer_Order", (string)null);
                });

            modelBuilder.Entity("DeliveryShift", b =>
                {
                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("Shift_ID");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_ID");

                    b.HasKey("ShiftId", "DeliveryId")
                        .HasName("PK__Delivery__D8DF8CB62E483601");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Delivery_shift", (string)null);
                });

            modelBuilder.Entity("MedicineOrder", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("Medicine_ID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.HasKey("MedicineId", "OrderId")
                        .HasName("PK__Medicine__F01F440C5101BE57");

                    b.HasIndex("OrderId");

                    b.ToTable("Medicine_Order", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OfferMedicine", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_ID");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("Medicine_ID");

                    b.HasKey("OfferId", "MedicineId")
                        .HasName("PK__Offer_Me__2318814D95613585");

                    b.HasIndex("MedicineId");

                    b.ToTable("Offer_Medicine", (string)null);
                });

            modelBuilder.Entity("PharmacyMedicine", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("Medicine_ID");

                    b.HasKey("PharmacyId", "MedicineId")
                        .HasName("PK__Pharmacy__37945907603DEF96");

                    b.HasIndex("MedicineId");

                    b.ToTable("Pharmacy_Medicine", (string)null);
                });

            modelBuilder.Entity("PharmacyOffer", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_ID");

                    b.HasKey("PharmacyId", "OfferId")
                        .HasName("PK__Pharmacy__840AC032AB3E0FEB");

                    b.HasIndex("OfferId");

                    b.ToTable("Pharmacy_Offer", (string)null);
                });

            modelBuilder.Entity("PharmacyOrder", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.HasKey("PharmacyId", "OrderId")
                        .HasName("PK__Pharmacy__DD7A0F1D317B69E2");

                    b.HasIndex("OrderId");

                    b.ToTable("Pharmacy_order", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_ID");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Customer_Address");

                    b.Property<DateTime>("CustomerBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Customer_BirthDate");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Customer_Email");

                    b.Property<string>("CustomerGender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Customer_Gender");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Customer_Name");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Customer_Phone");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Customer_Type");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.Property<int>("UCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("U_CustomerID");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__8CB286B97F8A9188");

                    b.HasIndex("UCustomerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_ID");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Delivery_Address");

                    b.Property<string>("DeliveryEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Delivery_Email");

                    b.Property<string>("DeliveryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Delivery_Name");

                    b.Property<string>("DeliveryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Delivery_Phone");

                    b.Property<int>("UDeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("U_DeliveryID");

                    b.HasKey("DeliveryId")
                        .HasName("PK__Delivery__AA55A01952BF9524");

                    b.HasIndex("UDeliveryId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_ID");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_ID");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("Invoice_date");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_ID");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoices__0DE60494F14439C7");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WebApplication1.Models.Medicine", b =>
                {
                    b.Property<int>("MediCineId")
                        .HasColumnType("int")
                        .HasColumnName("MediCine_ID");

                    b.Property<string>("MediCineAvailability")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MediCine_Availability");

                    b.Property<double>("MediCineCoastPrice")
                        .HasColumnType("float")
                        .HasColumnName("MediCine_CoastPrice");

                    b.Property<string>("MediCineEffectiveMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MediCine_EffectiveMaterial");

                    b.Property<DateTime>("MediCineExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("MediCine_ExpirationDate");

                    b.Property<string>("MediCineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MediCine_Name");

                    b.Property<DateTime>("MediCineProductionDate")
                        .HasColumnType("date")
                        .HasColumnName("MediCine_ProductionDate");

                    b.Property<int>("MediCineQuantity")
                        .HasColumnType("int")
                        .HasColumnName("MediCine_Quantity");

                    b.Property<double>("MediCineSellingPrice")
                        .HasColumnType("float")
                        .HasColumnName("MediCine_SellingPrice");

                    b.Property<string>("MediCineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MediCine_Type");

                    b.HasKey("MediCineId")
                        .HasName("PK__Medicine__29A3F3318FE0C250");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("WebApplication1.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int")
                        .HasColumnName("Offer_ID");

                    b.Property<string>("OfferDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Offer_Description");

                    b.Property<double>("OfferDiscount")
                        .HasColumnType("float")
                        .HasColumnName("Offer_Discount");

                    b.Property<DateTime>("OfferEndDate")
                        .HasColumnType("date")
                        .HasColumnName("Offer_EndDAte");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Offer_Name");

                    b.Property<string>("OfferPeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Offer_Period");

                    b.Property<DateTime>("OfferStartDate")
                        .HasColumnType("date")
                        .HasColumnName("Offer_StartDate");

                    b.HasKey("OfferId")
                        .HasName("PK__Offers__66E8916E2908E76A");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("WebApplication1.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_ID");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("Delivery_ID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("Order_Date");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float")
                        .HasColumnName("Order_Price");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__F1E4639B0610592F");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.Property<int>("PayId")
                        .HasColumnType("int")
                        .HasColumnName("Pay_ID");

                    b.Property<int>("InoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Inoice_ID");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("date")
                        .HasColumnName("Pay_Date");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pay_Method");

                    b.Property<string>("PayStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Pay_Status");

                    b.HasKey("PayId")
                        .HasName("PK__Payment__6F137505152EC252");

                    b.HasIndex("InoiceId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.Property<string>("PharmacyEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Pharmacy_Email");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pharmacy_Name");

                    b.Property<string>("PharmacyPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pharmacy_Phone");

                    b.Property<int>("UPharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("U_PharmacyID");

                    b.HasKey("PharmacyId")
                        .HasName("PK__Pharmacy__726449249C1FFFF4");

                    b.HasIndex("UPharmacyId");

                    b.ToTable("Pharmacy", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.PharmacyLocation", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("Pharmacy_ID");

                    b.Property<string>("PharmacyLocation1")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Pharmacy_Location");

                    b.HasKey("PharmacyId", "PharmacyLocation1")
                        .HasName("PK__Pharmacy__D131D73588B21F34");

                    b.ToTable("Pharmacy_Location", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("Shift_ID");

                    b.Property<string>("ShiftDay")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Shift_Day");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("time")
                        .HasColumnName("Shift_EndTime");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("time")
                        .HasColumnName("Shift_StartTime");

                    b.HasKey("ShiftId")
                        .HasName("PK__Shifts__527AD6B753DDCF0E");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UId"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UAdminId")
                        .HasColumnType("int")
                        .HasColumnName("U_AdminID");

                    b.Property<int?>("UCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("U_CustomerID");

                    b.Property<int?>("UDeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("U_DeliveryID");

                    b.Property<string>("UEmail")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("U_Email");

                    b.Property<string>("UName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("U_Name");

                    b.Property<string>("UPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("U_Password");

                    b.Property<int?>("UPharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("U_PharmacyID");

                    b.HasKey("UId")
                        .HasName("PK__Users__5A2040DB206DA6EF");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.HasOne("WebApplication1.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Order_Customer");

                    b.HasOne("WebApplication1.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Order_Orders");
                });

            modelBuilder.Entity("DeliveryShift", b =>
                {
                    b.HasOne("WebApplication1.Models.Delivery", null)
                        .WithMany()
                        .HasForeignKey("DeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK_Delivery_shift_Delivery");

                    b.HasOne("WebApplication1.Models.Shift", null)
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .IsRequired()
                        .HasConstraintName("FK_Delivery_shift_Shifts");
                });

            modelBuilder.Entity("MedicineOrder", b =>
                {
                    b.HasOne("WebApplication1.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_Medicine_Order_Medicines");

                    b.HasOne("WebApplication1.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Medicine_Order_Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OfferMedicine", b =>
                {
                    b.HasOne("WebApplication1.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_Offer_Medicine_Medicines");

                    b.HasOne("WebApplication1.Models.Offer", null)
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("FK_Offer_Medicine_Offers");
                });

            modelBuilder.Entity("PharmacyMedicine", b =>
                {
                    b.HasOne("WebApplication1.Models.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_Medicine_Medicines");

                    b.HasOne("WebApplication1.Models.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_Medicine_Pharmacy");
                });

            modelBuilder.Entity("PharmacyOffer", b =>
                {
                    b.HasOne("WebApplication1.Models.Offer", null)
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_Offer_Offers");

                    b.HasOne("WebApplication1.Models.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_Offer_Pharmacy");
                });

            modelBuilder.Entity("PharmacyOrder", b =>
                {
                    b.HasOne("WebApplication1.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_order_Orders");

                    b.HasOne("WebApplication1.Models.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_order_Pharmacy");
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "UCustomer")
                        .WithMany()
                        .HasForeignKey("UCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UCustomer");
                });

            modelBuilder.Entity("WebApplication1.Models.Delivery", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "UDelivery")
                        .WithMany()
                        .HasForeignKey("UDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UDelivery");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.HasOne("WebApplication1.Models.Delivery", "Delivery")
                        .WithMany("Invoices")
                        .HasForeignKey("DeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Delivery");

                    b.HasOne("WebApplication1.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Orders");

                    b.HasOne("WebApplication1.Models.Pharmacy", "Pharmacy")
                        .WithMany("Invoices")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Pharmacy");

                    b.Navigation("Delivery");

                    b.Navigation("Order");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("WebApplication1.Models.Order", b =>
                {
                    b.HasOne("WebApplication1.Models.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Delivery");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.HasOne("WebApplication1.Models.Invoice", "Inoice")
                        .WithMany("Payments")
                        .HasForeignKey("InoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Invoices");

                    b.Navigation("Inoice");
                });

            modelBuilder.Entity("WebApplication1.Models.Pharmacy", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "UPharmacy")
                        .WithMany()
                        .HasForeignKey("UPharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UPharmacy");
                });

            modelBuilder.Entity("WebApplication1.Models.PharmacyLocation", b =>
                {
                    b.HasOne("WebApplication1.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyLocations")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacy_Location_Pharmacy");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("WebApplication1.Models.Delivery", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WebApplication1.Models.Order", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("WebApplication1.Models.Pharmacy", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PharmacyLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
